{"version":3,"sources":["components/Header.jsx","components/AddCowForm.jsx","components/FinancialAnalysis.jsx","components/CowInventory.jsx","components/CowEmblem.js","components/HealthRecords.jsx","components/Home.jsx","App.js","index.js"],"names":["Header","React","createElement","AddCowForm","_ref","onAdd","name","setName","useState","breed","setBreed","age","setAge","onSubmit","event","preventDefault","newCow","parseInt","type","value","onChange","e","target","required","FinancialAnalysis","salesCows","setSalesCows","salesHeifers","setSalesHeifers","salesMilk","setSalesMilk","feedCost","setFeedCost","treatmentCost","setTreatmentCost","medicalChecksCost","setMedicalChecksCost","labourCost","setLabourCost","profit","setProfit","totalRevenue","totalExpenses","className","Number","onClick","calculateProfit","calculatedProfit","alert","Math","abs","toFixed","CowInventory","cows","styles","container","heading","table","map","cow","key","id","src","image","alt","length","colSpan","sampleCows","HealthRecords","selectedCow","setSelectedCow","vaccinationDate","setVaccinationDate","vaccinationCost","setVaccinationCost","treatedDate","setTreatedDate","treatedCost","setTreatedCost","checkUpDate","setCheckUpDate","checkUpCost","setCheckUpCost","parasiteControlDate","setParasiteControlDate","parasiteControlCost","setParasiteControlCost","dewormingDate","setDewormingDate","dewormingCost","setDewormingCost","cowServedDate","setCowServedDate","cowServedCost","setCowServedCost","isVaccinationDone","setIsVaccinationDone","isTreatedDone","setIsTreatedDone","isCheckUpDone","setIsCheckUpDone","isParasiteControlDone","setIsParasiteControlDone","isDewormingDone","setIsDewormingDone","isCowServedDone","setIsCowServedDone","recordsByMonth","setRecordsByMonth","selectedMonth","setSelectedMonth","resetForm","selectedId","find","checked","handleAddRecord","monthName","Date","toLocaleString","month","newRecord","vaccination","date","cost","treated","checkUp","parasiteControl","deworming","cowServed","prev","monthRecords","filterContainer","Array","_","i","record","index","Home","Link","to","App","setCows","useEffect","Router","Routes","Route","path","element","Fragment","CowEmblem","prevCows","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.b955bc2d.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => (\n  <header>\n    <h1>Dairy Cow Management</h1>\n  </header>\n);\n\nexport default Header;\n","import React, { useState } from 'react';\n\nconst AddCowForm = ({ onAdd }) => {\n  const [name, setName] = useState('');\n  const [breed, setBreed] = useState('');\n  const [age, setAge] = useState('');\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    const newCow = {\n      name,\n      breed,\n      age: parseInt(age, 10)\n    };\n    onAdd(newCow);\n    setName('');\n    setBreed('');\n    setAge('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <h2>Add a New Cow</h2>\n      <label>\n        Name:\n        <input\n          type=\"text\"\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n          required\n        />\n      </label>\n      <br />\n      <label>\n        Breed:\n        <input\n          type=\"text\"\n          value={breed}\n          onChange={(e) => setBreed(e.target.value)}\n          required\n        />\n      </label>\n      <br />\n      <label>\n        Age:\n        <input\n          type=\"number\"\n          value={age}\n          onChange={(e) => setAge(e.target.value)}\n          required\n        />\n      </label>\n      <br />\n      <button type=\"submit\">Add Cow</button>\n    </form>\n  );\n};\n\nexport default AddCowForm;\n\n\n\n\n\n\n\n","import React, { useState } from 'react';\nimport './FinancialAnalysis.css'; // Add your CSS file for styling\n\nconst FinancialAnalysis = () => {\n  const [salesCows, setSalesCows] = useState(0);\n  const [salesHeifers, setSalesHeifers] = useState(0);\n  const [salesMilk, setSalesMilk] = useState(0);\n  const [feedCost, setFeedCost] = useState(0);\n  const [treatmentCost, setTreatmentCost] = useState(0);\n  const [medicalChecksCost, setMedicalChecksCost] = useState(0);\n  const [labourCost, setLabourCost] = useState(0);\n  const [profit, setProfit] = useState(null);\n\n  const totalRevenue = salesCows + salesHeifers + salesMilk;\n  const totalExpenses = feedCost + treatmentCost + medicalChecksCost + labourCost;\n\n  const calculateProfit = () => {\n    const calculatedProfit = totalRevenue - totalExpenses;\n    setProfit(calculatedProfit);\n\n    if (calculatedProfit < 0) {\n      alert(`Loss: $${Math.abs(calculatedProfit).toFixed(2)}`);\n    } else if (calculatedProfit > 0) {\n      alert(`Profit: $${calculatedProfit.toFixed(2)}`);\n    } else {\n      alert('No profit or loss');\n    }\n  };\n\n  return (\n    <div className=\"financial-analysis\">\n      <h2>Financial Analysis</h2>\n      <table>\n        <thead>\n          <tr>\n            <th>Expenses</th>\n            <th>Revenue</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>\n              <div>\n                <label>Cost of Feeds:</label>\n                <input\n                  type=\"number\"\n                  value={feedCost}\n                  onChange={(e) => setFeedCost(Number(e.target.value))}\n                />\n              </div>\n              <div>\n                <label>Cost of Treatment:</label>\n                <input\n                  type=\"number\"\n                  value={treatmentCost}\n                  onChange={(e) => setTreatmentCost(Number(e.target.value))}\n                />\n              </div>\n              <div>\n                <label>Routine Medical Checks:</label>\n                <input\n                  type=\"number\"\n                  value={medicalChecksCost}\n                  onChange={(e) => setMedicalChecksCost(Number(e.target.value))}\n                />\n              </div>\n              <div>\n                <label>Labour Costs:</label>\n                <input\n                  type=\"number\"\n                  value={labourCost}\n                  onChange={(e) => setLabourCost(Number(e.target.value))}\n                />\n              </div>\n            </td>\n            <td>\n              <div>\n                <label>Sale of Cows:</label>\n                <input\n                  type=\"number\"\n                  value={salesCows}\n                  onChange={(e) => setSalesCows(Number(e.target.value))}\n                />\n              </div>\n              <div>\n                <label>Sale of Heifers:</label>\n                <input\n                  type=\"number\"\n                  value={salesHeifers}\n                  onChange={(e) => setSalesHeifers(Number(e.target.value))}\n                />\n              </div>\n              <div>\n                <label>Sale of Milk:</label>\n                <input\n                  type=\"number\"\n                  value={salesMilk}\n                  onChange={(e) => setSalesMilk(Number(e.target.value))}\n                />\n              </div>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n      <button onClick={calculateProfit}>Calculate Profit</button>\n      {profit !== null && (\n        <div className=\"result\">\n          <h3>Profit: ${profit.toFixed(2)}</h3>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default FinancialAnalysis;\n\n\n\n\n\n\n\n","import React from 'react';\nimport styles from './CowInventory.css'; // Ensure this path is correct\n\nconst CowInventory = ({ cows }) => {\n  return (\n    <div className={styles.container}>\n      <h2 className={styles.heading}>Cow Inventory</h2>\n      <table className={styles.table}>\n        <thead>\n          <tr>\n            <th>ID</th>\n            <th>Image</th>\n            <th>Name</th>\n            <th>Breed</th>\n            <th>Age</th>\n          </tr>\n        </thead>\n        <tbody>\n          {cows.map(cow => (\n            <tr key={cow.id}>\n              <td>{cow.id}</td>\n              <td>\n                <img src={cow.image} alt={cow.name} className={styles.image} />\n              </td>\n              <td>{cow.name}</td>\n              <td>{cow.breed}</td>\n              <td>{cow.age}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default CowInventory;\n","import React from 'react';\nimport PropTypes from 'prop-types'; // Optional, for type checking\nimport styles from './CowInventory.css'; // Ensure this path is correct\n\nconst CowInventory = ({ cows = [] }) => {\n  return (\n    <div className={styles.container}>\n      <h2>Cow Inventory</h2>\n      <table className={styles.table}>\n        <thead>\n          <tr>\n            <th>ID</th>\n            <th>Image</th>\n            <th>Name</th>\n            <th>Breed</th>\n            <th>Age</th>\n          </tr>\n        </thead>\n        <tbody>\n          {cows.length > 0 ? (\n            cows.map(cow => (\n              <tr key={cow.id}>\n                <td>{cow.id}</td>\n                <td>\n                  {cow.image ? (\n                    <img src={cow.image} alt={cow.name} className={styles.image} />\n                  ) : (\n                    <span>No Image</span>\n                  )}\n                </td>\n                <td>{cow.name}</td>\n                <td>{cow.breed}</td>\n                <td>{cow.age}</td>\n              </tr>\n            ))\n          ) : (\n            <tr>\n              <td colSpan=\"5\">No cows available</td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\n// Optional: Add prop types for better type checking\nCowInventory.propTypes = {\n  cows: PropTypes.array\n};\n\nexport default CowInventory;\n","import React, { useState } from 'react';\nimport styles from './HealthRecords.css'; // Ensure this path is correct\n\nconst sampleCows = [\n  { id: \"1\", name: \"Apollo\", breed: \"Holstein-Friesian\" },\n  { id: \"2\", name: \"Ruby\", breed: \"Holstein-Friesian\" },\n  { id: \"3\", name: \"Bessie\", breed: \"Holstein-Friesian\" },\n  { id: \"4\", name: \"Daisy\", breed: \"Jersey\" },\n  // Add more cow entries as needed\n];\n\nconst HealthRecords = () => {\n  const [cows] = useState(sampleCows);\n  const [selectedCow, setSelectedCow] = useState(null);\n  const [vaccinationDate, setVaccinationDate] = useState('');\n  const [vaccinationCost, setVaccinationCost] = useState('');\n  const [treatedDate, setTreatedDate] = useState('');\n  const [treatedCost, setTreatedCost] = useState('');\n  const [checkUpDate, setCheckUpDate] = useState('');\n  const [checkUpCost, setCheckUpCost] = useState('');\n  const [parasiteControlDate, setParasiteControlDate] = useState('');\n  const [parasiteControlCost, setParasiteControlCost] = useState('');\n  const [dewormingDate, setDewormingDate] = useState('');\n  const [dewormingCost, setDewormingCost] = useState('');\n  const [cowServedDate, setCowServedDate] = useState('');\n  const [cowServedCost, setCowServedCost] = useState('');\n\n  const [isVaccinationDone, setIsVaccinationDone] = useState(false);\n  const [isTreatedDone, setIsTreatedDone] = useState(false);\n  const [isCheckUpDone, setIsCheckUpDone] = useState(false);\n  const [isParasiteControlDone, setIsParasiteControlDone] = useState(false);\n  const [isDewormingDone, setIsDewormingDone] = useState(false);\n  const [isCowServedDone, setIsCowServedDone] = useState(false);\n\n  const [recordsByMonth, setRecordsByMonth] = useState({});\n  const [selectedMonth, setSelectedMonth] = useState('');\n\n  const handleCowChange = (event) => {\n    const selectedId = event.target.value;\n    const cow = cows.find(cow => cow.id === selectedId);\n    setSelectedCow(cow);\n\n    // Reset form fields when a new cow is selected\n    resetForm();\n  };\n\n  const resetForm = () => {\n    setVaccinationDate('');\n    setVaccinationCost('');\n    setTreatedDate('');\n    setTreatedCost('');\n    setCheckUpDate('');\n    setCheckUpCost('');\n    setParasiteControlDate('');\n    setParasiteControlCost('');\n    setDewormingDate('');\n    setDewormingCost('');\n    setCowServedDate('');\n    setCowServedCost('');\n    setIsVaccinationDone(false);\n    setIsTreatedDone(false);\n    setIsCheckUpDone(false);\n    setIsParasiteControlDone(false);\n    setIsDewormingDone(false);\n    setIsCowServedDone(false);\n  };\n\n  const handleAddRecord = () => {\n    if (!selectedCow) {\n      alert('Please select a cow.');\n      return;\n    }\n\n    const monthName = new Date().toLocaleString('default', { month: 'long' });\n    const newRecord = {\n      cow: selectedCow.name,\n      vaccination: isVaccinationDone ? { date: vaccinationDate, cost: vaccinationCost } : null,\n      treated: isTreatedDone ? { date: treatedDate, cost: treatedCost } : null,\n      checkUp: isCheckUpDone ? { date: checkUpDate, cost: checkUpCost } : null,\n      parasiteControl: isParasiteControlDone ? { date: parasiteControlDate, cost: parasiteControlCost } : null,\n      deworming: isDewormingDone ? { date: dewormingDate, cost: dewormingCost } : null,\n      cowServed: isCowServedDone ? { date: cowServedDate, cost: cowServedCost } : null,\n    };\n\n    setRecordsByMonth(prev => {\n      const monthRecords = prev[monthName] || [];\n      return { ...prev, [monthName]: [...monthRecords, newRecord] };\n    });\n\n    // Reset form fields after adding the record\n    resetForm();\n    setSelectedCow(null);\n  };\n\n  const handleMonthChange = (event) => {\n    setSelectedMonth(event.target.value);\n  };\n\n  return (\n    <div className={styles.container}>\n      <h2>Health Records</h2>\n      <form>\n        <label>\n          Select Cow:\n          <select onChange={handleCowChange} value={selectedCow ? selectedCow.id : ''}>\n            <option value=\"\">-- Select a Cow --</option>\n            {cows.map(cow => (\n              <option key={cow.id} value={cow.id}>\n                {cow.name}\n              </option>\n            ))}\n          </select>\n        </label>\n        {selectedCow && (\n          <div>\n            <h3>{selectedCow.name} ({selectedCow.breed})</h3>\n            <table className={styles.table}>\n              <thead>\n                <tr>\n                  <th>Practice</th>\n                  <th>Done</th>\n                  <th>Date</th>\n                  <th>Cost</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <td>Vaccination</td>\n                  <td>\n                    <input\n                      type=\"checkbox\"\n                      checked={isVaccinationDone}\n                      onChange={(e) => setIsVaccinationDone(e.target.checked)}\n                    />\n                  </td>\n                  <td>\n                    {isVaccinationDone && (\n                      <input\n                        type=\"date\"\n                        value={vaccinationDate}\n                        onChange={(e) => setVaccinationDate(e.target.value)}\n                      />\n                    )}\n                  </td>\n                  <td>\n                    {isVaccinationDone && (\n                      <input\n                        type=\"number\"\n                        value={vaccinationCost}\n                        onChange={(e) => setVaccinationCost(e.target.value)}\n                      />\n                    )}\n                  </td>\n                </tr>\n                <tr>\n                  <td>Treated</td>\n                  <td>\n                    <input\n                      type=\"checkbox\"\n                      checked={isTreatedDone}\n                      onChange={(e) => setIsTreatedDone(e.target.checked)}\n                    />\n                  </td>\n                  <td>\n                    {isTreatedDone && (\n                      <input\n                        type=\"date\"\n                        value={treatedDate}\n                        onChange={(e) => setTreatedDate(e.target.value)}\n                      />\n                    )}\n                  </td>\n                  <td>\n                    {isTreatedDone && (\n                      <input\n                        type=\"number\"\n                        value={treatedCost}\n                        onChange={(e) => setTreatedCost(e.target.value)}\n                      />\n                    )}\n                  </td>\n                </tr>\n                <tr>\n                  <td>Routine Check Up</td>\n                  <td>\n                    <input\n                      type=\"checkbox\"\n                      checked={isCheckUpDone}\n                      onChange={(e) => setIsCheckUpDone(e.target.checked)}\n                    />\n                  </td>\n                  <td>\n                    {isCheckUpDone && (\n                      <input\n                        type=\"date\"\n                        value={checkUpDate}\n                        onChange={(e) => setCheckUpDate(e.target.value)}\n                      />\n                    )}\n                  </td>\n                  <td>\n                    {isCheckUpDone && (\n                      <input\n                        type=\"number\"\n                        value={checkUpCost}\n                        onChange={(e) => setCheckUpCost(e.target.value)}\n                      />\n                    )}\n                  </td>\n                </tr>\n                <tr>\n                  <td>Parasite Control</td>\n                  <td>\n                    <input\n                      type=\"checkbox\"\n                      checked={isParasiteControlDone}\n                      onChange={(e) => setIsParasiteControlDone(e.target.checked)}\n                    />\n                  </td>\n                  <td>\n                    {isParasiteControlDone && (\n                      <input\n                        type=\"date\"\n                        value={parasiteControlDate}\n                        onChange={(e) => setParasiteControlDate(e.target.value)}\n                      />\n                    )}\n                  </td>\n                  <td>\n                    {isParasiteControlDone && (\n                      <input\n                        type=\"number\"\n                        value={parasiteControlCost}\n                        onChange={(e) => setParasiteControlCost(e.target.value)}\n                      />\n                    )}\n                  </td>\n                </tr>\n                <tr>\n                  <td>Deworming</td>\n                  <td>\n                    <input\n                      type=\"checkbox\"\n                      checked={isDewormingDone}\n                      onChange={(e) => setIsDewormingDone(e.target.checked)}\n                    />\n                  </td>\n                  <td>\n                    {isDewormingDone && (\n                      <input\n                        type=\"date\"\n                        value={dewormingDate}\n                        onChange={(e) => setDewormingDate(e.target.value)}\n                      />\n                    )}\n                  </td>\n                  <td>\n                    {isDewormingDone && (\n                      <input\n                        type=\"number\"\n                        value={dewormingCost}\n                        onChange={(e) => setDewormingCost(e.target.value)}\n                      />\n                    )}\n                  </td>\n                </tr>\n                <tr>\n                  <td>Cow Served</td>\n                  <td>\n                    <input\n                      type=\"checkbox\"\n                      checked={isCowServedDone}\n                      onChange={(e) => setIsCowServedDone(e.target.checked)}\n                    />\n                  </td>\n                  <td>\n                    {isCowServedDone && (\n                      <input\n                        type=\"date\"\n                        value={cowServedDate}\n                        onChange={(e) => setCowServedDate(e.target.value)}\n                      />\n                    )}\n                  </td>\n                  <td>\n                    {isCowServedDone && (\n                      <input\n                        type=\"number\"\n                        value={cowServedCost}\n                        onChange={(e) => setCowServedCost(e.target.value)}\n                      />\n                    )}\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n            <button type=\"button\" onClick={handleAddRecord}>Add Record</button>\n          </div>\n        )}\n      </form>\n\n      <div className={styles.filterContainer}>\n        <label>\n          Select Month:\n          <select onChange={handleMonthChange} value={selectedMonth}>\n            <option value=\"\">-- Select a Month --</option>\n            {[...Array(12)].map((_, i) => (\n              <option key={i + 1} value={new Date(0, i).toLocaleString('default', { month: 'long' })}>\n                {new Date(0, i).toLocaleString('default', { month: 'long' })}\n              </option>\n            ))}\n          </select>\n        </label>\n      </div>\n\n      {selectedMonth && (\n        <div>\n          <h3>Records for {selectedMonth}</h3>\n          <table className={styles.table}>\n            <thead>\n              <tr>\n                <th>Cow Name</th>\n                <th>Vaccination</th>\n                <th>Treated</th>\n                <th>Routine Check Up</th>\n                <th>Parasite Control</th>\n                <th>Deworming</th>\n                <th>Cow Served</th>\n              </tr>\n            </thead>\n            <tbody>\n              {(recordsByMonth[selectedMonth] || []).map((record, index) => (\n                <tr key={index}>\n                  <td>{record.cow}</td>\n                  <td>{record.vaccination ? `${record.vaccination.date} - $${record.vaccination.cost}` : 'N/A'}</td>\n                  <td>{record.treated ? `${record.treated.date} - $${record.treated.cost}` : 'N/A'}</td>\n                  <td>{record.checkUp ? `${record.checkUp.date} - $${record.checkUp.cost}` : 'N/A'}</td>\n                  <td>{record.parasiteControl ? `${record.parasiteControl.date} - $${record.parasiteControl.cost}` : 'N/A'}</td>\n                  <td>{record.deworming ? `${record.deworming.date} - $${record.deworming.cost}` : 'N/A'}</td>\n                  <td>{record.cowServed ? `${record.cowServed.date} - $${record.cowServed.cost}` : 'N/A'}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default HealthRecords;\n","// src/components/Home.js\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport './Home.css'; // Import the CSS file for styling\n\nconst Home = () => {\n  return (\n    <nav className=\"nav-bar\"> {/* Add a class for styling */}\n      <ul>\n        <li>\n          <Link to=\"/\">Home</Link>\n        </li>\n        <li>\n          <Link to=\"/cow-inventory\">Cow Inventory</Link>\n        </li>\n        <li>\n          <Link to=\"/add-cow\">Add Cow</Link>\n        </li>\n        <li>\n          <Link to=\"/financial-analysis\">Financial Analysis</Link>\n        </li>\n        <li>\n          <Link to=\"/health-records\">Health Records</Link>\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\nexport default Home;\n","import React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport Header from './components/Header';\nimport AddCowForm from './components/AddCowForm';\nimport FinancialAnalysis from './components/FinancialAnalysis';\nimport CowInventory from './components/CowInventory';\nimport CowEmblem from './components/CowEmblem';\nimport HealthRecords from './components/HealthRecords';\nimport Home from './components/Home'; // Updated import statement\nimport './App.css';\n\nconst App = () => {\n  const [cows, setCows] = useState([]);\n\n  useEffect(() => {\n    // Simulate fetching cow data\n    const fetchCows = () => {\n      const cowData = []; // Use actual data here\n      setCows(cowData);\n    };\n\n    fetchCows();\n  }, []);\n\n  const addCow = (cow) => {\n    setCows((prevCows) => [...prevCows, cow]);\n  };\n\n  return (\n    <Router>\n      <Header />\n      <Home /> {/* Updated usage */}\n      <div className=\"main-content\">\n        <Routes>\n          <Route path=\"/\" element={\n            <>\n              <CowEmblem />\n              {/* Add additional default content here if needed */}\n            </>\n          } />\n          <Route path=\"/cow-inventory\" element={<CowInventory cows={cows} />} />\n          <Route path=\"/add-cow\" element={<AddCowForm onAdd={addCow} />} />\n          <Route path=\"/financial-analysis\" element={<FinancialAnalysis />} />\n          <Route path=\"/health-records\" element={<HealthRecords />} />\n          <Route path=\"/test\" element={<div>Test Page</div>} />\n        </Routes>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}